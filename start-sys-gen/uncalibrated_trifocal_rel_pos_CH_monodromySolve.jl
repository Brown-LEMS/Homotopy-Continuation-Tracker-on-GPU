using Base
using HomotopyContinuation
using LinearAlgebra

@var x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18
@var p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 p16 p17 p18 p19 p20 p21 p22 p23 p24

f1 = p9*x18 - x13 - 2*x1*x5*x7 - 2*x1*x6*x8 - p1*x1*x5^2*x18 - p1*x1*x6^2*x18 + p1*x1*x7^2*x18 + p1*x1*x8^2*x18 + p9*x1*x5^2*x18 - p9*x1*x6^2*x18 - p9*x1*x7^2*x18 + p9*x1*x8^2*x18 + 2*p5*x1*x5*x8*x18 - 2*p5*x1*x6*x7*x18 - 2*p1*p9*x1*x5*x7*x18^2 + 2*p1*p9*x1*x6*x8*x18^2 + 2*p5*p9*x1*x5*x6*x18^2 + 2*p5*p9*x1*x7*x8*x18^2;
f2 = p13*x18 - x14 + 2*x1*x5*x6 - 2*x1*x7*x8 - p5*x1*x5^2*x18 + p5*x1*x6^2*x18 - p5*x1*x7^2*x18 + p5*x1*x8^2*x18 + p13*x1*x5^2*x18 - p13*x1*x6^2*x18 - p13*x1*x7^2*x18 + p13*x1*x8^2*x18 - 2*p1*x1*x5*x8*x18 - 2*p1*x1*x6*x7*x18 - 2*p1*p13*x1*x5*x7*x18^2 + 2*p1*p13*x1*x6*x8*x18^2 + 2*p5*p13*x1*x5*x6*x18^2 + 2*p5*p13*x1*x7*x8*x18^2;
f3 = p17*x17*x18 - x15 - 2*x1*x9*x11 - 2*x1*x10*x12 - p1*x1*x9^2*x18 - p1*x1*x10^2*x18 + p1*x1*x11^2*x18 + p1*x1*x12^2*x18 + p17*x1*x9^2*x18 - p17*x1*x10^2*x18 - p17*x1*x11^2*x18 + p17*x1*x12^2*x18 + 2*p5*x1*x9*x12*x18 - 2*p5*x1*x10*x11*x18 - 2*p1*p17*x1*x9*x11*x18^2 + 2*p1*p17*x1*x10*x12*x18^2 + 2*p5*p17*x1*x9*x10*x18^2 + 2*p5*p17*x1*x11*x12*x18^2;
f4 = p21*x17*x18 - x16 + 2*x1*x9*x10 - 2*x1*x11*x12 - p5*x1*x9^2*x18 + p5*x1*x10^2*x18 - p5*x1*x11^2*x18 + p5*x1*x12^2*x18 + p21*x1*x9^2*x18 - p21*x1*x10^2*x18 - p21*x1*x11^2*x18 + p21*x1*x12^2*x18 - 2*p1*x1*x9*x12*x18 - 2*p1*x1*x10*x11*x18 - 2*p1*p21*x1*x9*x11*x18^2 + 2*p1*p21*x1*x10*x12*x18^2 + 2*p5*p21*x1*x9*x10*x18^2 + 2*p5*p21*x1*x11*x12*x18^2;
f5 = p10*x18 - x13 - 2*x2*x5*x7 - 2*x2*x6*x8 - p2*x2*x5^2*x18 - p2*x2*x6^2*x18 + p2*x2*x7^2*x18 + p2*x2*x8^2*x18 + p10*x2*x5^2*x18 - p10*x2*x6^2*x18 - p10*x2*x7^2*x18 + p10*x2*x8^2*x18 + 2*p6*x2*x5*x8*x18 - 2*p6*x2*x6*x7*x18 - 2*p2*p10*x2*x5*x7*x18^2 + 2*p2*p10*x2*x6*x8*x18^2 + 2*p6*p10*x2*x5*x6*x18^2 + 2*p6*p10*x2*x7*x8*x18^2;
f6 = p14*x18 - x14 + 2*x2*x5*x6 - 2*x2*x7*x8 - p6*x2*x5^2*x18 + p6*x2*x6^2*x18 - p6*x2*x7^2*x18 + p6*x2*x8^2*x18 + p14*x2*x5^2*x18 - p14*x2*x6^2*x18 - p14*x2*x7^2*x18 + p14*x2*x8^2*x18 - 2*p2*x2*x5*x8*x18 - 2*p2*x2*x6*x7*x18 - 2*p2*p14*x2*x5*x7*x18^2 + 2*p2*p14*x2*x6*x8*x18^2 + 2*p6*p14*x2*x5*x6*x18^2 + 2*p6*p14*x2*x7*x8*x18^2;
f7 = p18*x17*x18 - x15 - 2*x2*x9*x11 - 2*x2*x10*x12 - p2*x2*x9^2*x18 - p2*x2*x10^2*x18 + p2*x2*x11^2*x18 + p2*x2*x12^2*x18 + p18*x2*x9^2*x18 - p18*x2*x10^2*x18 - p18*x2*x11^2*x18 + p18*x2*x12^2*x18 + 2*p6*x2*x9*x12*x18 - 2*p6*x2*x10*x11*x18 - 2*p2*p18*x2*x9*x11*x18^2 + 2*p2*p18*x2*x10*x12*x18^2 + 2*p6*p18*x2*x9*x10*x18^2 + 2*p6*p18*x2*x11*x12*x18^2;
f8 = p22*x17*x18 - x16 + 2*x2*x9*x10 - 2*x2*x11*x12 - p6*x2*x9^2*x18 + p6*x2*x10^2*x18 - p6*x2*x11^2*x18 + p6*x2*x12^2*x18 + p22*x2*x9^2*x18 - p22*x2*x10^2*x18 - p22*x2*x11^2*x18 + p22*x2*x12^2*x18 - 2*p2*x2*x9*x12*x18 - 2*p2*x2*x10*x11*x18 - 2*p2*p22*x2*x9*x11*x18^2 + 2*p2*p22*x2*x10*x12*x18^2 + 2*p6*p22*x2*x9*x10*x18^2 + 2*p6*p22*x2*x11*x12*x18^2;
f9 = p11*x18 - x13 - 2*x3*x5*x7 - 2*x3*x6*x8 - p3*x3*x5^2*x18 - p3*x3*x6^2*x18 + p3*x3*x7^2*x18 + p3*x3*x8^2*x18 + p11*x3*x5^2*x18 - p11*x3*x6^2*x18 - p11*x3*x7^2*x18 + p11*x3*x8^2*x18 + 2*p7*x3*x5*x8*x18 - 2*p7*x3*x6*x7*x18 - 2*p3*p11*x3*x5*x7*x18^2 + 2*p3*p11*x3*x6*x8*x18^2 + 2*p7*p11*x3*x5*x6*x18^2 + 2*p7*p11*x3*x7*x8*x18^2;
f10 = p15*x18 - x14 + 2*x3*x5*x6 - 2*x3*x7*x8 - p7*x3*x5^2*x18 + p7*x3*x6^2*x18 - p7*x3*x7^2*x18 + p7*x3*x8^2*x18 + p15*x3*x5^2*x18 - p15*x3*x6^2*x18 - p15*x3*x7^2*x18 + p15*x3*x8^2*x18 - 2*p3*x3*x5*x8*x18 - 2*p3*x3*x6*x7*x18 - 2*p3*p15*x3*x5*x7*x18^2 + 2*p3*p15*x3*x6*x8*x18^2 + 2*p7*p15*x3*x5*x6*x18^2 + 2*p7*p15*x3*x7*x8*x18^2;
f11 = p19*x17*x18 - x15 - 2*x3*x9*x11 - 2*x3*x10*x12 - p3*x3*x9^2*x18 - p3*x3*x10^2*x18 + p3*x3*x11^2*x18 + p3*x3*x12^2*x18 + p19*x3*x9^2*x18 - p19*x3*x10^2*x18 - p19*x3*x11^2*x18 + p19*x3*x12^2*x18 + 2*p7*x3*x9*x12*x18 - 2*p7*x3*x10*x11*x18 - 2*p3*p19*x3*x9*x11*x18^2 + 2*p3*p19*x3*x10*x12*x18^2 + 2*p7*p19*x3*x9*x10*x18^2 + 2*p7*p19*x3*x11*x12*x18^2;
f12 = p23*x17*x18 - x16 + 2*x3*x9*x10 - 2*x3*x11*x12 - p7*x3*x9^2*x18 + p7*x3*x10^2*x18 - p7*x3*x11^2*x18 + p7*x3*x12^2*x18 + p23*x3*x9^2*x18 - p23*x3*x10^2*x18 - p23*x3*x11^2*x18 + p23*x3*x12^2*x18 - 2*p3*x3*x9*x12*x18 - 2*p3*x3*x10*x11*x18 - 2*p3*p23*x3*x9*x11*x18^2 + 2*p3*p23*x3*x10*x12*x18^2 + 2*p7*p23*x3*x9*x10*x18^2 + 2*p7*p23*x3*x11*x12*x18^2;
f13 = p12*x18 - x13 - 2*x4*x5*x7 - 2*x4*x6*x8 - p4*x4*x5^2*x18 - p4*x4*x6^2*x18 + p4*x4*x7^2*x18 + p4*x4*x8^2*x18 + p12*x4*x5^2*x18 - p12*x4*x6^2*x18 - p12*x4*x7^2*x18 + p12*x4*x8^2*x18 + 2*p8*x4*x5*x8*x18 - 2*p8*x4*x6*x7*x18 - 2*p4*p12*x4*x5*x7*x18^2 + 2*p4*p12*x4*x6*x8*x18^2 + 2*p8*p12*x4*x5*x6*x18^2 + 2*p8*p12*x4*x7*x8*x18^2;
f14 = p16*x18 - x14 + 2*x4*x5*x6 - 2*x4*x7*x8 - p8*x4*x5^2*x18 + p8*x4*x6^2*x18 - p8*x4*x7^2*x18 + p8*x4*x8^2*x18 + p16*x4*x5^2*x18 - p16*x4*x6^2*x18 - p16*x4*x7^2*x18 + p16*x4*x8^2*x18 - 2*p4*x4*x5*x8*x18 - 2*p4*x4*x6*x7*x18 - 2*p4*p16*x4*x5*x7*x18^2 + 2*p4*p16*x4*x6*x8*x18^2 + 2*p8*p16*x4*x5*x6*x18^2 + 2*p8*p16*x4*x7*x8*x18^2;
f15 = p20*x17*x18 - x15 - 2*x4*x9*x11 - 2*x4*x10*x12 - p4*x4*x9^2*x18 - p4*x4*x10^2*x18 + p4*x4*x11^2*x18 + p4*x4*x12^2*x18 + p20*x4*x9^2*x18 - p20*x4*x10^2*x18 - p20*x4*x11^2*x18 + p20*x4*x12^2*x18 + 2*p8*x4*x9*x12*x18 - 2*p8*x4*x10*x11*x18 - 2*p4*p20*x4*x9*x11*x18^2 + 2*p4*p20*x4*x10*x12*x18^2 + 2*p8*p20*x4*x9*x10*x18^2 + 2*p8*p20*x4*x11*x12*x18^2;
f16 = p24*x17*x18 - x16 + 2*x4*x9*x10 - 2*x4*x11*x12 - p8*x4*x9^2*x18 + p8*x4*x10^2*x18 - p8*x4*x11^2*x18 + p8*x4*x12^2*x18 + p24*x4*x9^2*x18 - p24*x4*x10^2*x18 - p24*x4*x11^2*x18 + p24*x4*x12^2*x18 - 2*p4*x4*x9*x12*x18 - 2*p4*x4*x10*x11*x18 - 2*p4*p24*x4*x9*x11*x18^2 + 2*p4*p24*x4*x10*x12*x18^2 + 2*p8*p24*x4*x9*x10*x18^2 + 2*p8*p24*x4*x11*x12*x18^2;
f17 = x5^2 + x6^2 + x7^2 + x8^2 - 1;
f18 = x9^2 + x10^2 + x11^2 + x12^2 - 1;

F = System([f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18]; variables=[x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18], parameters = [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24]);

S = monodromy_solve(F)
start_solutions = solutions(S);
start_params = S.parameters;

target_params = rand(24) + rand(24) * im;
@time solve(F, start_solutions; start_parameters=start_params, target_parameters=target_params)


#> write target solutions to a file
#io = open("/home/chchien/hcOutput", "w");
#using DelimitedFiles
#writedlm(io, solutions(R));
#close(io)
